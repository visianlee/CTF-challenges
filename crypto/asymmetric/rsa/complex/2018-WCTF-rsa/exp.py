from hashlib import sha512
import gmpy2
from pwn import *
n = 483901264006946269405283937218262944021205510033824140430120406965422208942781742610300462772237450489835092525764447026827915305166372385721345243437217652055280011968958645513779764522873874876168998429546523181404652757474147967518856439439314619402447703345139460317764743055227009595477949315591334102623664616616842043021518775210997349987012692811620258928276654394316710846752732008480088149395145019159397592415637014390713798032125010969597335893399022114906679996982147566245244212524824346645297637425927685406944205604775116409108280942928854694743108774892001745535921521172975113294131711065606768927
e = 65537
c = 320881698662242726122152659576060496538921409976895582875089953705144841691963343665651276480485795667557825130432466455684921314043200553005547236066163215094843668681362420498455007509549517213285453773102481574390864574950259479765662844102553652977000035769295606566722752949297781646289262341623549414376262470908749643200171565760656987980763971637167709961003784180963669498213369651680678149962512216448400681654410536708661206594836597126012192813519797526082082969616915806299114666037943718435644796668877715954887614703727461595073689441920573791980162741306838415524808171520369350830683150672985523901
const = "\x8C\x69\x76\xE5\xB5\x41\x04\x15\xBD\xE9\x08\xBD\x4D\xEE\x15\xDF\xB1\x67\xA9\xC8\x73\xFC\x4B\xB8\xA8\x1F\x6F\x2A\xB4\x48\xA9\x18"
mod = pow(2, 64)
possible = dict()


def bsearch(value):
    lo, hi = 0, len(possible) - 1
    while lo <= hi:
        mid = (lo + hi) / 2
        if possible[mid] < value:
            lo = mid + 1
        elif value < possible[mid]:
            hi = mid - 1
        else:
            return mid
    return -1


def genall():
    for i in xrange(0, 1000000007):
        print i
        tmp = const + p32(i)
        num = int(sha512(tmp).hexdigest(), 16) % mod
        possible[num] = i
    #possible.sort()


def get_b_d():
    n64 = n % mod
    for d in possible:
        tmp = n * gmpy2.invert(d, mod)
        if tmp in possible:
            print 'b=', possible[tmp]
            print 'd=', d


def get_high_p(b_idx_list):
    for b_idx in b_idx_list:
        tmp = const + p32(b_idx)
        num = int(sha512(tmp).hexdigest(), 16)
        for i in xrange(0, 1000000007):
            if i % 100000 == 0:
                print i
            tmp = const + p32(i)
            tmp = int(sha512(tmp).hexdigest(), 16) << 512
            num = tmp + num
            if n % num == 0:
                print hex(num)
                print hex(n / num)
                break


if __name__ == "__main__":
    # generate all possible a,b,c,d
    #genall()
    # get b and d
    #get_b_d()
    b_idx_list = [683101175, 380087137]
    get_high_p(b_idx_list)
